# -*- coding: utf-8 -*-
"""mercadofinanceiro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bi_KUf0eItgCAy79zFO41luMGc8l5NFd

# Nova seção
"""

from google.colab import auth
auth.authenticate_user()



import pandas as pd
import yfinance as yf
import gspread
from gspread_dataframe import set_with_dataframe
from google.auth import default
import time # Import time for sleep

# Autorização Google
creds, _ = default()
gc = gspread.authorize(creds)

# Parâmetros principais
TICKERS = ['BOVA11.SA', 'BTC-USD']  # Pode misturar AÇÕES, FIIs, ETFs e CRIPTOS
SHEET_ID = '1D8wlSpiPqu-7F0bvMzLo6EPWH6SfxOzO2E7KlvmX9Pw'
ABA = 'Sheet1'

# Campos extras do dicionário info (pode adicionar/remover)
extra_cols = [
    'sector', 'industry', 'longName', 'country', 'currency',
    'marketCap', 'dividendYield', 'symbol', 'shortName'
]

# Período e intervalo customizáveis
PERIODO = '1d'      # exemplos: '1d', '5d', '1mo', '3mo', '1y'
INTERVALO = '1h'    # exemplos: '1h', '1d', '5m'

all_df = []

# Retry logic for downloading data
MAX_TRIES = 3

for ticker in TICKERS:
    tries = 0
    while tries < MAX_TRIES:
        try:
            df = yf.download(ticker, period=PERIODO, interval=INTERVALO, progress=False)
            if df.empty:
                print(f"Nenhum dado para {ticker}")
                break  # Exit the while loop if no data
            if isinstance(df.columns, pd.MultiIndex):
                df.columns = [col[-1] for col in df.columns.values]
            df.reset_index(inplace=True)
            df['Ticker'] = ticker.replace('.SA', '')

            try:
                info = yf.Ticker(ticker).info
            except Exception as e:
                print(f"Could not get info for {ticker}: {e}")
                info = {}
            for col in extra_cols:
                df[col] = info.get(col, None)

            # marketCap para bilhões
            if 'marketCap' in df.columns: # Check if column exists before applying lambda
                df['marketCap'] = df['marketCap'].apply(lambda x: round(x/1e9, 2) if pd.notnull(x) else x)
            # Padroniza datas
            if 'Datetime' in df.columns:
                df.rename(columns={'Datetime': 'date_time'}, inplace=True)
            elif 'Date' in df.columns:
                df.rename(columns={'Date': 'date_time'}, inplace=True)
            if 'date_time' in df.columns: # Check if column exists before formatting
                df['date_time'] = pd.to_datetime(df['date_time']).dt.strftime('%Y-%m-%d %H:%M')


            df.rename(columns={
                'Open': 'open',
                'High': 'high',
                'Low': 'low',
                'Close': 'close',
                'Volume': 'volume'
            }, inplace=True)

            cols = ['Ticker', 'date_time', 'open', 'high', 'low', 'close', 'volume'] + extra_cols
            df = df[[col for col in cols if col in df.columns]]
            all_df.append(df)
            break  # Sai do loop se funcionar
        except Exception as e:
            print(f"Erro ao baixar {ticker} (tentativa {tries+1}/{MAX_TRIES}): {e}")
            tries += 1
            time.sleep(2)  # Aguarda 2 segundos antes de tentar de novo
    else:
        print(f"Falha ao baixar {ticker} após {MAX_TRIES} tentativas.")


# Concatena se houver mais de um ticker
if all_df: # Check if all_df is not empty before concatenating
  df_final = pd.concat(all_df, ignore_index=True)

  # Upload para Google Sheets
  planilha = gc.open_by_key(SHEET_ID)
  aba = planilha.worksheet(ABA)
  aba.clear()
  set_with_dataframe(aba, df_final)
  print(f"✅ {len(df_final)} linhas de {len(TICKERS)} ticker(s) atualizadas no Google Sheets '{ABA}'.")
else:
  print("Nenhum dado foi baixado para nenhum dos tickers.")

"""# Nova seção"""
